# SPDX-FileCopyrightText: 2022-present Lukas Neubert <lukas.neubert@proton.me>
# SPDX-License-Identifier: MIT

scopeName: source.bait
fileTypes: [.bt]

patterns:
  - include: '#attributes'
  - include: '#comments'
  - include: '#types'
  - include: '#functions'
  - include: '#keywords'
  - include: '#numbers'
  - include: '#strings'
  - include: '#variables'

repository:
  attributes:
    name: meta.attribute
    begin: ^(@\w+)(:\s*)?
    end: $
    beginCaptures:
      1:
        name: support.other.attribute
    patterns:
      - include: '#strings'

  comments:
    name: comment.line.double-slash
    begin: //
    end: $

  functions:
    patterns:
      - name: meta.function.definition
        begin: ^(?:(pub\b)\s+)?(fun\b)\s*(?:\((mut\b)?\s?(\w+)\s+\W*([a-zA-Z0-9.]+)\))?
        beginCaptures:
          1:
            name: keyword.other
          2:
            name: keyword.fun
          3:
            name: keyword.other
          4:
            name: variable.parameter
          5:
            name: support.type.receiver
        end: (\w+)\s*(\[[^\]]*\])?\s*\(
        endCaptures:
          1:
            name: entity.name.function
          2:
            name: meta.generics.definition
      - name: meta.function.call
        match: (\w+)\(
        captures:
          1:
            name: entity.name.function

  keywords:
    patterns:
      - name: keyword.fun
        match: \bfun\b
      - name: keyword.other
        match: \b(as|assert|const|enum|global|import|interface|mut|package|pub|static|struct|type|typeof)\b
      - name: keyword.control
        match: \b(and|break|continue|else|for|if|in|is|match|not|or|return)\b
      - name: keyword.control.comptime
        match: \$(else|if)\b
      - name: constant.language
        match: \b(false|true)\b

  numbers:
    name: constant.numeric
    match: -?\d+

  strings:
    patterns:
      - name: string.quoted.single
        begin: "'"
        end: "'"
        patterns:
          - include: '#string-escaped-char'
          - include: '#string-interpolation'
      - name: string.quoted.double
        begin: "\""
        end: "\""
        patterns:
          - include: '#string-escaped-char'
          - include: '#string-interpolation'
      - name: string.other.byte
        begin: "`"
        end: "`"
        patterns:
          - include: '#char-escaped-char'

  string-escaped-char:
    name: constant.character.escape.bait
    match: \\[\'\"\\\$]

  char-escaped-char:
    name: constant.character.escape.bait
    match: \\[`\\]

  string-interpolation:
    name: meta.string.interpolated
    match: (\${)([^}]*)(})
    captures:
      1:
        name: punctuation.definition.template-expression.begin
      2:
        name: variable.other.interpolated
      3:
        name: punctuation.definition.template-expression.end

  types:
    name: support.type.builtin
    match: \b(bool|(i|u)(8|16|32|64)|f(32|64)|map|string|void)\b

  variables:
    name: variable.other
    match: \b[a-z][a-z0-9_]*\b
